#pragma once

#include "FESDF.h"
using namespace FocalEngine;

namespace FocalEngine
{
#define DEFAULT_GRID_SIZE 1.25f
#define GRID_VARIANCE 25

	static std::vector<float> PseudoRandom64 = {
		0.300000f, 0.100000f, 0.020000f, 1.430000f,
		0.450000f, 0.130000f, 0.090000f, 1.410000f,
		0.410000f, -0.310000f, 0.300000f, 1.390000f,
		0.340000f, 0.130000f, 0.470000f, 1.330000f,
		-0.390000f, 0.060000f, -0.440000f, 1.400000f,
		-0.350000f, -0.020000f, 0.380000f, 1.340000f,
		-0.300000f, 0.480000f, -0.500000f, 1.280000f,
		-0.390000f, 0.060000f, 0.370000f, 1.290000f,
		-0.120000f, 0.270000f, 0.300000f, 1.300000f,
		0.030000f, -0.060000f, -0.290000f, 1.410000f,
		-0.240000f, -0.130000f, -0.130000f, 1.250000f,
		0.220000f, -0.320000f, 0.160000f, 1.300000f,
		-0.360000f, -0.010000f, -0.190000f, 1.270000f,
		-0.200000f, -0.220000f, -0.140000f, 1.440000f,
		0.340000f, -0.100000f, -0.060000f, 1.280000f,
		-0.210000f, 0.290000f, 0.090000f, 1.270000f,
		0.130000f, 0.010000f, 0.180000f, 1.250000f,
		0.090000f, 0.460000f, 0.350000f, 1.460000f,
		-0.500000f, -0.090000f, 0.320000f, 1.250000f,
		-0.200000f, 0.080000f, -0.320000f, 1.260000f,
		-0.390000f, -0.440000f, 0.420000f, 1.410000f,
		0.260000f, -0.040000f, 0.400000f, 1.440000f,
		-0.020000f, -0.010000f, 0.290000f, 1.400000f,
		-0.020000f, -0.370000f, 0.280000f, 1.390000f,
		0.240000f, -0.320000f, -0.290000f, 1.410000f,
		-0.100000f, 0.360000f, -0.110000f, 1.420000f,
		-0.270000f, -0.490000f, 0.470000f, 1.250000f,
		-0.450000f, 0.390000f, -0.310000f, 1.280000f,
		0.440000f, -0.290000f, -0.360000f, 1.460000f,
		0.000000f, -0.050000f, -0.370000f, 1.400000f,
		-0.060000f, 0.120000f, 0.430000f, 1.270000f,
		-0.490000f, 0.410000f, 0.150000f, 1.270000f,
		-0.500000f, 0.370000f, -0.040000f, 1.390000f,
		0.380000f, -0.210000f, 0.040000f, 1.320000f,
		0.280000f, 0.340000f, -0.430000f, 1.270000f,
		-0.410000f, -0.450000f, 0.330000f, 1.430000f,
		-0.180000f, -0.370000f, 0.070000f, 1.280000f,
		-0.110000f, -0.310000f, 0.400000f, 1.300000f,
		-0.060000f, 0.270000f, 0.240000f, 1.320000f,
		-0.390000f, 0.480000f, 0.180000f, 1.260000f,
		-0.390000f, 0.100000f, 0.070000f, 1.330000f,
		-0.260000f, -0.230000f, 0.450000f, 1.430000f,
		0.480000f, 0.080000f, -0.140000f, 1.470000f,
		0.330000f, -0.380000f, -0.350000f, 1.310000f,
		0.180000f, 0.200000f, -0.330000f, 1.490000f,
		-0.230000f, -0.110000f, 0.070000f, 1.250000f,
		0.190000f, -0.230000f, -0.330000f, 1.480000f,
		0.480000f, 0.150000f, 0.290000f, 1.410000f,
		-0.210000f, 0.240000f, 0.180000f, 1.320000f,
		0.450000f, -0.230000f, 0.240000f, 1.480000f,
		0.400000f, 0.370000f, -0.060000f, 1.450000f,
		0.080000f, -0.500000f, 0.200000f, 1.370000f,
		-0.240000f, -0.380000f, 0.440000f, 1.430000f,
		-0.230000f, -0.210000f, 0.240000f, 1.390000f,
		-0.320000f, -0.050000f, 0.330000f, 1.370000f,
		-0.030000f, -0.470000f, -0.320000f, 1.480000f,
		0.320000f, 0.160000f, 0.460000f, 1.460000f,
		0.270000f, 0.430000f, 0.410000f, 1.380000f,
		0.240000f, -0.470000f, -0.190000f, 1.430000f,
		0.480000f, -0.420000f, -0.240000f, 1.490000f,
		-0.400000f, -0.270000f, 0.060000f, 1.450000f,
		0.280000f, 0.430000f, -0.010000f, 1.490000f,
		-0.190000f, 0.110000f, -0.100000f, 1.450000f,
		-0.210000f, -0.040000f, 0.340000f, 1.440000f,
	};

	static std::vector<float> Tetrahedron1Jitter = {
		0.0000, 0.0000, 0.0000, 1.0000f,
	};

	static std::vector<float> Tetrahedron7Jitter = {
		0.0000, 0.0000, 0.0000, 1.0000f,
		0.0000, 1.0000, -0.0000, 1.0000f,
		1.0000, 0.0000, -0.0000, 1.0000f,
		0.0000, 0.0000, -1.0000, 1.0000f,
		-1.0000, 0.0000, -0.0000, 1.0000f,
		0.0000, 0.0000, 1.0000, 1.0000f,
		0.0000, -1.0000, -0.0000, 1.0000f
	};

	static std::vector<float> Tetrahedron13Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, 0.50000, -0.50000, 1.0000f,
		-0.70711, 0.50000, -0.50000, 1.0000f,
		-0.70711, -0.50000, 0.50000, 1.0000f,
		0.70711, -0.50000, 0.50000, 1.0000f,
		-0.00000, -0.70711, -0.70711, 1.0000f
	};

	static std::vector<float> Tetrahedron19Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, -0.70711, 1.0000f,
		-0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, -0.70711, 1.0000f,
		-0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, 0.70711, 1.0000f,
		0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, 0.70711, 1.0000f,
		0.70711, 0.00000, 0.70711, 1.0000f
	};

	static std::vector<float> Tetrahedron25Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, -0.70711, 1.0000f,
		-0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, -0.70711, 1.0000f,
		-0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, 0.70711, 1.0000f,
		0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, 0.70711, 1.0000f,
		0.70711, 0.00000, 0.70711, 1.0000f,
		-0.00537, 0.45959, 0.45962, 1.0000f,
		0.45579, 0.33035, -0.32500, 1.0000f,
		-0.46338, 0.31961, -0.32500, 1.0000f,
		-0.45579, -0.33035, 0.32500, 1.0000f,
		0.46338, -0.31961, 0.32500, 1.0000f,
		0.00537, -0.45959, -0.45962, 1.0000f
	};

	static std::vector<float> Tetrahedron37Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, -0.70711, 1.0000f,
		-0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, -0.70711, 1.0000f,
		-0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, 0.70711, 1.0000f,
		0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, 0.70711, 1.0000f,
		0.70711, 0.00000, 0.70711, 1.0000f,
		0.04654, 0.37805, 0.32391, 1.0000f,
		0.25692, 0.26041, -0.34085, 1.0000f,
		-0.42641, 0.19816, -0.17001, 1.0000f,
		-0.25692, -0.26041, 0.34085, 1.0000f,
		0.42641, -0.19816, 0.17001, 1.0000f,
		-0.04654, -0.37805, -0.32391, 1.0000f,
		0.21458, 0.45146, -0.01198, 1.0000f,
		-0.26861, 0.40744, 0.10882, 1.0000f,
		-0.14876, 0.08318, 0.47005, 1.0000f,
		0.33443, 0.12720, 0.34926, 1.0000f,
		0.14876, -0.08318, -0.47005, 1.0000f,
		-0.33443, -0.12720, -0.34926, 1.0000f,
		-0.21458, -0.45146, 0.01198, 1.0000f,
		0.26861, -0.40744, -0.10882, 1.0000f,
		-0.11985, 0.32426, -0.36124, 1.0000f,
		-0.48319, -0.04401, 0.12080, 1.0000f,
		0.11985, -0.32426, 0.36124, 1.0000f,
		0.48319, 0.04401, -0.12080, 1.0000f
	};

	static std::vector<float> Tetrahedron55Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, -0.70711, 1.0000f,
		-0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, -0.70711, 1.0000f,
		-0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, 0.70711, 1.0000f,
		0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, 0.70711, 1.0000f,
		0.70711, 0.00000, 0.70711, 1.0000f,
		0.06143, 0.49902, 0.42756, 1.0000f,
		0.33913, 0.34374, -0.44992, 1.0000f,
		-0.56286, 0.26158, -0.22442, 1.0000f,
		-0.33913, -0.34374, 0.44992, 1.0000f,
		0.56286, -0.26158, 0.22442, 1.0000f,
		-0.06143, -0.49902, -0.42756, 1.0000f,
		0.28324, 0.59592, -0.01582, 1.0000f,
		-0.35456, 0.53782, 0.14364, 1.0000f,
		-0.19636, 0.10980, 0.62047, 1.0000f,
		0.44144, 0.16790, 0.46102, 1.0000f,
		0.19636, -0.10980, -0.62047, 1.0000f,
		-0.44144, -0.16790, -0.46102, 1.0000f,
		-0.28324, -0.59592, 0.01582, 1.0000f,
		0.35456, -0.53782, -0.14364, 1.0000f,
		-0.15820, 0.42802, -0.47683, 1.0000f,
		-0.63781, -0.05810, 0.15946, 1.0000f,
		0.15820, -0.42802, 0.47683, 1.0000f,
		0.63781, 0.05810, -0.15946, 1.0000f,
		0.00360, 0.23247, 0.23419, 1.0000f,
		0.25790, 0.14413, -0.14702, 1.0000f,
		-0.20586, 0.18463, -0.18010, 1.0000f,
		-0.25790, -0.14413, 0.14702, 1.0000f,
		0.20586, -0.18463, 0.18010, 1.0000f,
		-0.00360, -0.23247, -0.23419, 1.0000f,
		0.18490, 0.26629, 0.06164, 1.0000f,
		-0.14302, 0.29493, 0.03825, 1.0000f,
		-0.17982, 0.06246, 0.26956, 1.0000f,
		0.14810, 0.03383, 0.29295, 1.0000f,
		0.17982, -0.06246, -0.26956, 1.0000f,
		-0.14810, -0.03383, -0.29295, 1.0000f,
		-0.18490, -0.26629, -0.06164, 1.0000f,
		0.14302, -0.29493, -0.03825, 1.0000f,
		0.03680, 0.23247, -0.23131, 1.0000f,
		-0.32792, 0.02864, -0.02339, 1.0000f,
		-0.03680, -0.23247, 0.23131, 1.0000f,
		0.32792, -0.02864, 0.02339, 1.0000f
	};

	static std::vector<float> Tetrahedron73Jitter = {
		0.00000, 0.00000, 0.00000, 1.0000f,
		0.00000, 1.00000, -0.00000, 1.0000f,
		1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, -1.00000, 1.0000f,
		-1.00000, 0.00000, -0.00000, 1.0000f,
		0.00000, 0.00000, 1.00000, 1.0000f,
		0.00000, -1.00000, -0.00000, 1.0000f,
		0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, -0.70711, 1.0000f,
		-0.70711, 0.70711, -0.00000, 1.0000f,
		0.00000, 0.70711, 0.70711, 1.0000f,
		0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, -0.70711, 1.0000f,
		-0.70711, -0.70711, -0.00000, 1.0000f,
		0.00000, -0.70711, 0.70711, 1.0000f,
		0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, -0.70711, 1.0000f,
		-0.70711, 0.00000, 0.70711, 1.0000f,
		0.70711, 0.00000, 0.70711, 1.0000f,
		0.06981, 0.56707, 0.48586, 1.0000f,
		0.38538, 0.39061, -0.51128, 1.0000f,
		-0.63962, 0.29724, -0.25502, 1.0000f,
		-0.38538, -0.39061, 0.51128, 1.0000f,
		0.63962, -0.29724, 0.25502, 1.0000f,
		-0.06981, -0.56707, -0.48586, 1.0000f,
		0.32187, 0.67718, -0.01797, 1.0000f,
		-0.40291, 0.61116, 0.16323, 1.0000f,
		-0.22314, 0.12477, 0.70508, 1.0000f,
		0.50164, 0.19079, 0.52388, 1.0000f,
		0.22314, -0.12477, -0.70508, 1.0000f,
		-0.50164, -0.19079, -0.52388, 1.0000f,
		-0.32187, -0.67718, 0.01797, 1.0000f,
		0.40291, -0.61116, -0.16323, 1.0000f,
		-0.17977, 0.48639, -0.54185, 1.0000f,
		-0.72478, -0.06602, 0.18120, 1.0000f,
		0.17977, -0.48639, 0.54185, 1.0000f,
		0.72478, 0.06602, -0.18120, 1.0000f,
		0.00545, 0.35222, 0.35484, 1.0000f,
		0.39075, 0.21838, -0.22276, 1.0000f,
		-0.31190, 0.27974, -0.27288, 1.0000f,
		-0.39075, -0.21838, 0.22276, 1.0000f,
		0.31190, -0.27974, 0.27288, 1.0000f,
		-0.00545, -0.35222, -0.35484, 1.0000f,
		0.28016, 0.40347, 0.09339, 1.0000f,
		-0.21670, 0.44686, 0.05795, 1.0000f,
		-0.27245, 0.09464, 0.40843, 1.0000f,
		0.22440, 0.05125, 0.44387, 1.0000f,
		0.27245, -0.09464, -0.40843, 1.0000f,
		-0.22440, -0.05125, -0.44387, 1.0000f,
		-0.28016, -0.40347, -0.09339, 1.0000f,
		0.21670, -0.44686, -0.05795, 1.0000f,
		0.05576, 0.35222, -0.35047, 1.0000f,
		-0.49685, 0.04339, -0.03544, 1.0000f,
		-0.05576, -0.35222, 0.35047, 1.0000f,
		0.49685, -0.04339, 0.03544, 1.0000f,
		0.04625, 0.08012, 0.23225, 1.0000f,
		0.18067, 0.14906, -0.08740, 1.0000f,
		-0.16649, 0.18401, -0.03033, 1.0000f,
		-0.18067, -0.14906, 0.08740, 1.0000f,
		0.16649, -0.18401, 0.03033, 1.0000f,
		-0.04625, -0.08012, -0.23225, 1.0000f,
		0.16046, 0.16206, 0.10243, 1.0000f,
		-0.08502, 0.18677, 0.14278, 1.0000f,
		-0.09505, -0.04875, 0.22603, 1.0000f,
		0.15043, -0.07346, 0.18567, 1.0000f,
		0.09505, 0.04875, -0.22603, 1.0000f,
		-0.15043, 0.07346, -0.18567, 1.0000f,
		-0.16046, -0.16206, -0.10243, 1.0000f,
		0.08502, -0.18677, -0.14278, 1.0000f,
		0.01003, 0.23552, -0.08324, 1.0000f,
		-0.24548, 0.02472, 0.04036, 1.0000f,
		-0.01003, -0.23552, 0.08324, 1.0000f,
		0.24548, -0.02472, -0.04036, 1.0000f
	};

	static std::unordered_map<std::string, std::vector<float>> TetrahedronJitterOrientationsOptions = {
		{"1",		Tetrahedron1Jitter},
		{"7",		Tetrahedron7Jitter},
		{"13",		Tetrahedron13Jitter},
		//{"19",		Tetrahedron19Jitter},
		{"25",		Tetrahedron25Jitter},
		{"37",		Tetrahedron37Jitter},
		{"55",		Tetrahedron55Jitter},
		{"73",		Tetrahedron73Jitter}
	};

	static std::vector<float> SphereJitter = {
		0.0000, 1.0000, -0.0000, 1.430000f,
		1.0000, 0.0000, -0.0000, 1.410000f,
		0.0000, 0.0000, -1.0000, 1.390000f,
		-1.0000, 0.0000, -0.0000, 1.330000f,
		0.0000, 0.0000, 1.0000, 1.400000f,
		0.0000, -1.0000, -0.0000, 1.340000f,
		0.5000, 0.8660, -0.0000, 1.280000f,
		0.8660, 0.5000, -0.0000, 1.290000f,
		0.0000, 0.8660, -0.5000, 1.300000f,
		0.0000, 0.5000, -0.8660, 1.410000f,
		-0.5000, 0.8660, -0.0000, 1.250000f,
		-0.8660, 0.5000, -0.0000, 1.300000f,
		0.0000, 0.8660, 0.5000, 1.270000f,
		0.0000, 0.5000, 0.8660, 1.440000f,
		0.5000, -0.8660, -0.0000, 1.280000f,
		0.8660, -0.5000, -0.0000, 1.270000f,
		0.0000, -0.8660, -0.5000, 1.250000f,
		0.0000, -0.5000, -0.8660, 1.460000f,
		-0.5000, -0.8660, -0.0000, 1.250000f,
		-0.8660, -0.5000, -0.0000, 1.260000f,
		0.0000, -0.8660, 0.5000, 1.410000f,
		0.0000, -0.5000, 0.8660, 1.440000f,
		0.8660, 0.0000, -0.5000, 1.400000f,
		0.5000, 0.0000, -0.8660, 1.390000f,
		-0.5000, 0.0000, -0.8660, 1.410000f,
		-0.8660, 0.0000, -0.5000, 1.420000f,
		-0.8660, 0.0000, 0.5000, 1.250000f,
		-0.5000, 0.0000, 0.8660, 1.280000f,
		0.5000, 0.0000, 0.8660, 1.460000f,
		0.8660, 0.0000, 0.5000, 1.400000f,
		0.5477, 0.6325, -0.5477, 1.270000f,
		-0.5477, 0.6325, -0.5477, 1.270000f,
		-0.5477, 0.6325, 0.5477, 1.390000f,
		0.5477, 0.6325, 0.5477, 1.320000f,
		0.5477, -0.6325, -0.5477, 1.270000f,
		-0.5477, -0.6325, -0.5477, 1.430000f,
		-0.5477, -0.6325, 0.5477, 1.280000f,
		0.5477, -0.6325, 0.5477, 1.300000f,
		0.0000, 0.5000, -0.0000, 1.320000f,
		0.4714, -0.1667, -0.0000, 1.260000f,
		-0.2357, -0.1667, -0.4082, 1.330000f,
		-0.2357, -0.1667, 0.4082, 1.430000f,
		0.2973, 0.4020, -0.0000, 1.470000f,
		0.4781, 0.1463, -0.0000, 1.310000f,
		-0.1487, 0.4020, -0.2575, 1.490000f,
		-0.2391, 0.1463, -0.4140, 1.250000f,
		-0.1487, 0.4020, 0.2575, 1.480000f,
		-0.2391, 0.1463, 0.4140, 1.410000f,
		0.3294, -0.2742, -0.2575, 1.320000f,
		0.0583, -0.2742, -0.4140, 1.480000f,
		0.3294, -0.2742, 0.2575, 1.450000f,
		0.0583, -0.2742, 0.4140, 1.370000f,
		-0.3877, -0.2742, -0.1565, 1.430000f,
		-0.3877, -0.2742, 0.1565, 1.390000f,
		0.2132, 0.2611, -0.3693, 1.370000f,
		-0.4264, 0.2611, -0.0000, 1.480000f,
		0.2132, 0.2611, 0.3693, 1.460000f,
		0.1040, -0.4891, -0.0000, 1.380000f,
	};

	struct SDFInitData_Jitter
	{
		float ShiftX = 0.0f;
		float ShiftY = 0.0f;
		float ShiftZ = 0.0f;

		float GridScale = 2.5f;
	};

	class JitterManager
	{
		friend class UIManager;
	public:
		SINGLETON_PUBLIC_PART(JitterManager)

		static void OnMeshUpdate();

		void CalculateWithSDFJitterAsync(std::function<void(SDFNode* currentNode)> Func, bool bSmootherResult = false);
		void CalculateOnWholeModel(std::function<void(SDFNode* currentNode)> Func);
		void SetOnCalculationsStartCallback(std::function<void()> Func);
		void SetOnCalculationsEndCallback(std::function<void(MeshLayer CurrentMeshLayer)> Func);

		float GetResolutonInM();
		void SetResolutonInM(float NewResolutonInM);

		float GetLowestPossibleResolution();
		float GetHigestPossibleResolution();

		int GetJitterDoneCount();
		int GetJitterToDoCount();

		std::vector<std::vector<float>> GetPerJitterResult();

		SDF* GetLastUsedSDF();
		std::vector<SDFInitData_Jitter> GetLastUsedJitterSettings();

		/**
		* @brief Sets the function that determines whether a calculated value should be ignored.
		*
		* This function is called for each calculated value in each jitter. If it returns true, the value is ignored.
		* If it returns false, the value is used to calculate all jitter combined result array.
		* 
		* After each calculation, this function will reset to ensure the default behavior is applied.
		*
		* @param Func The desired function.
		*/
		void SetIgnoreValueFunction(std::function<bool(float Value)> Func);

		/**
		* @brief Sets the fallback value for the result array.
		*
		* This value is used for an element in the result array only if all its
		* calculated values are ignored. By providing a fallback, we ensure that
		* the result array has a consistent value in such scenarios, preventing
		* potential issues from uninitialized or unpredictable data.
		* 
		* After each calculation, this value will be reset to 1.0f to ensure that the default behavior is used.
		*
		* @param NewValue The desired fallback value.
		*/
		void SetFallbackValue(float NewValue);

		std::string GetCurrentJitterVectorSetName();
		void SetCurrentJitterVectorSetName(std::string name);
		std::vector<std::string> GetJitterVectorSetNames();
	private:
		SINGLETON_PRIVATE_PART(JitterManager)

		SDF* LastUsedSDF = nullptr;
		std::vector<SDFInitData_Jitter> LastUsedJitterSettings;
		std::function<void(SDFNode* currentNode)> CurrentFunc;
		
		int JitterDoneCount = 0;
		int JitterToDoCount = 4;
		int DebugJitterToDoCount = -1;
		int GetDebugJitterToDoCount();
		void SetDebugJitterToDoCount(int NewValue);
		std::vector<std::string> JitterVectorSetNames;
		std::string CurrentJitterVectorSetName = "55";

		float ResolutonInM = 1.0f;
		float LowestPossibleResolution = -1.0f;
		float HigestPossibleResolution = -1.0f;

		float ShiftX = 0.0f;
		float ShiftY = 0.0f;
		float ShiftZ = 0.0f;

		float GridScale = 1.25f;

		std::vector<float> Result;
		std::vector<std::vector<float>> PerJitterResult;
		std::vector<int> CorrectValuesCounters;
		float FallbackValue = 1.0f;
		std::function<bool(float Value)> IgnoreValueFunc = nullptr;

		void RunCreationOfSDFAsync();
		static void RunCalculationOnSDFAsync(void* InputData, void* OutputData);
		static void AfterCalculationFinishSDFCallback(void* OutputData);
		void MoveResultDataFromSDF(SDF* SDF);
		void RunCalculationOnWholeModel(SDF* ResultSDF);

		static void OnCalculationsStart();
		static void OnCalculationsEnd();

		std::vector <std::function<void()>> OnCalculationsStartCallbacks;
		std::vector<std::function<void(MeshLayer CurrentMeshLayer)>> OnCalculationsEndCallbacks;

		float LastTimeTookForCalculation;
		uint64_t StartTime;
	};

	#define JITTER_MANAGER JitterManager::getInstance()
}